{"version":3,"sources":["components/search-form/SearchForm.tsx","components/search-result/loader.svg","components/search-result/SearchResult.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SearchForm","props","useState","query","setQuery","className","onSubmit","e","preventDefault","value","onChange","target","type","a","fetch","json","res","data","map","item","title","url","images","preview_gif","getContent","state","loading","src","loader","gifs","length","style","backgroundImage","alt","SearchResult","setState","useEffect","fetchGifs","then","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAuBeA,MApBf,SAAoBC,GAA+C,IAAD,EACtCC,mBAAS,IAD6B,mBACzDC,EADyD,KAClDC,EADkD,KAEhE,OACE,uBACEC,UAAU,cACVC,SAAU,SAACC,GACTN,EAAMK,SAASH,GACfI,EAAEC,kBAJN,UAOE,uBACEH,UAAU,aACVI,MAAON,EACPO,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOF,UAErC,uBAAOJ,UAAU,cAAcO,KAAK,SAASH,MAAM,e,uBClB1C,G,MAAA,IAA0B,oC,4CCYzC,WAAyBN,GAAzB,eAAAU,EAAA,4DACiB,mCADjB,SAGUC,MAAM,gDAAD,OAFE,mCAEF,cACmDX,EADnD,cAHf,8BAMIY,OANJ,cAEQC,EAFR,yBAOSA,EAAIC,KAAKC,KACd,SAACC,GAAD,MAAwE,CACtEC,MAAOD,EAAKC,MACZC,IAAKF,EAAKG,OAAOC,YAAYF,SAVnC,4C,sBAeA,SAASG,EAAWrB,EAAesB,GACjC,OAAKtB,EAGDsB,EAAMC,QACD,qBAAKC,IAAKC,EAAQvB,UAAU,WAEX,IAAtBoB,EAAMI,KAAKC,OACP,4BAAN,OAAmC3B,EAAnC,KAEKsB,EAAMI,KAAKX,KAAI,gBAAGE,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OACpB,qBAEEhB,UAAU,YACV0B,MAAO,CAAEC,gBAAgB,OAAD,OAASX,EAAT,MAH1B,SAKE,qBAAKM,IAAKN,EAAKY,IAAKb,EAAOf,UAAU,WAJhCgB,MAVA,mBA+BIa,MAZf,SAAsBjC,GAA2B,IAAD,EACpBC,mBAAgB,CAAE2B,KAAM,GAAIH,SAAS,IADjB,mBACvCD,EADuC,KAChCU,EADgC,KAS9C,OANAC,qBAAU,WACJnC,EAAME,QACRgC,EAAS,CAAEN,KAAM,GAAIH,SAAS,I,2CAC9BW,CAAUpC,EAAME,OAAOmC,MAAK,SAACT,GAAD,OAAUM,EAAS,CAAET,SAAS,EAAOG,eAElE,CAAC5B,EAAME,QACH,qBAAKE,UAAU,gBAAf,SAAgCmB,EAAWvB,EAAME,MAAOsB,M,MCvClDc,MAbf,WAAgB,IAAD,EACarC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,KAGb,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAAYC,SAAUF,IACtB,cAAC,EAAD,CAAcD,MAAOA,UCEdqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBJ,MAAK,YAAkD,IAA/CK,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b7cdbee0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./SearchForm.css\";\n\nfunction SearchForm(props: { onSubmit: (query: string) => void }) {\n  const [query, setQuery] = useState(\"\");\n  return (\n    <form\n      className=\"search-form\"\n      onSubmit={(e) => {\n        props.onSubmit(query);\n        e.preventDefault();\n      }}\n    >\n      <input\n        className=\"form-input\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n      <input className=\"form-submit\" type=\"submit\" value=\"Search\" />\n    </form>\n  );\n}\n\nexport default SearchForm;\n","export default __webpack_public_path__ + \"static/media/loader.ebeb623c.svg\";","import React, { useEffect, useState } from \"react\";\nimport \"./SearchResult.css\";\nimport loader from \"./loader.svg\";\n\ninterface State {\n  gifs: {\n    title: string;\n    url: string;\n  }[];\n  loading: boolean;\n}\n\nasync function fetchGifs(query: string) {\n  const apiKey = \"wrgbdKpcFfiiZLFXt7eWCtbDRfpl9IZh\";\n  const res = await (\n    await fetch(\n      `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${query}&limit=10`,\n    )\n  ).json();\n  return res.data.map(\n    (item: { title: string; images: { preview_gif: { url: string } } }) => ({\n      title: item.title,\n      url: item.images.preview_gif.url,\n    }),\n  );\n}\n\nfunction getContent(query: string, state: State) {\n  if (!query) {\n    return \"Type something ^\";\n  }\n  if (state.loading) {\n    return <img src={loader} className=\"loader\" />;\n  }\n  if (state.gifs.length === 0) {\n    return `No gifs found for query \"${query}\"`;\n  }\n  return state.gifs.map(({ title, url }) => (\n    <div\n      key={url}\n      className=\"serp-item\"\n      style={{ backgroundImage: `url(${url})` }}\n    >\n      <img src={url} alt={title} className=\"image\" />\n    </div>\n  ));\n}\n\nfunction SearchResult(props: { query: string }) {\n  const [state, setState] = useState<State>({ gifs: [], loading: false });\n\n  useEffect(() => {\n    if (props.query) {\n      setState({ gifs: [], loading: true });\n      fetchGifs(props.query).then((gifs) => setState({ loading: false, gifs }));\n    }\n  }, [props.query]);\n  return <div className=\"search-result\">{getContent(props.query, state)}</div>;\n}\n\nexport default SearchResult;\n","import React, { useState } from \"react\";\nimport SearchForm from \"./components/search-form/SearchForm\";\nimport SearchResult from \"./components/search-result/SearchResult\";\nimport \"./App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <SearchForm onSubmit={setQuery} />\n        <SearchResult query={query} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}